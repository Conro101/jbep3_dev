// ********************************
// ** auto generated pixelshader **
// ********************************

#define SHADER_EDITOR_2013_COMPILE


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _Sampler_02		: register( s2 );
sampler _Sampler_03		: register( s3 );

// Constants
const float _g_Time		: register( c16 );
const float g_cData_Mutable_01		: register( c17 ); 		// Mutable

// Arrays
static const float g_cArray_161[20] =
{
	float( 0.002881f ),
	float( 0.006006f ),
	float( 0.011541f ),
	float( 0.020437f ),
	float( 0.033352f ),
	float( 0.050163f ),
	float( 0.069534f ),
	float( 0.088829f ),
	float( 0.104583f ),
	float( 0.113478f ),
	float( 0.113478f ),
	float( 0.104583f ),
	float( 0.088829f ),
	float( 0.069534f ),
	float( 0.050163f ),
	float( 0.033352f ),
	float( 0.020437f ),
	float( 0.011541f ),
	float( 0.006006f ),
	float( 0.002881f ),
};

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float4 _var0 = tex2D( _Sampler_00, In.vTexCoord_0 ).rgba;
	float _var1 = float( 2.000000 ) * _g_Time;
	float _var2 = frac( _g_Time );
	float2 _var3 = In.vTexCoord_0 - float( 0.500000 );
	float _var4 = float( 20.000000 ) * _g_Time;
	float _var5 = _g_Time * float( 0.100000 );
	float _var6 = _g_Time * float( -4.000000 );
	float2 _var7 = float2( _g_Time, _g_Time );
	float _var8 = _g_Time + float( 0.500000 );
	float _var9 = frac( _g_Time );
	float _var10 = float( 5.000000 ) * _g_Time;
	float _var11 = _g_Time * float( 3.000000 );
	float4 _var12 = float4( 0.000000, 0.000000, 0.000000, 0.000000 );
	_var1 = sin( _var1 );
	float2 _var13 = _var2.xx;
	float _var14 = length( _var3 );
	_var4 = cos( _var4 );
	float2 _var15 = normalize( _var3 );
	float2 _var16 = float2( _var5.x, 0.000000 );
	_var7 = float( 0.010000 ) * _var7;
	_var8 = frac( _var8 );
	_var9 = 1.0f - _var9;
	_var10 = sin( _var10 );
	_var1 = float( 3.500000 ) * _var1;
	float _var17 = smoothstep( float( 0.000000 ), float( 0.500000 ), _var14 );
	_var4 = abs( _var4 );
	float _var18 = smoothstep( float( 0.300000 ), float( 0.800000 ), _var14 );
	float _var19 = dot( _var15, float2( 0.000000, 1.000000 ) );
	float _var20 = dot( _var15, float2( 1.000000, 0.000000 ) );
	float4 _texLookup_85 = tex2D( _Sampler_01, _var7 );
	float _var21 = _texLookup_85.r;
	float _var22 = _texLookup_85.g;
	float _var23 = 1.0f - _var8;
	float2 _var24 = _var9.xx;
	_var10 = abs( _var10 );
	float _var25 = _var8 - float( 0.500000 );
	float _var26 = smoothstep( float( -0.050000 ), float( 0.200000 ), _var14 );
	float _var27 = _var14;
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float fs = sin( _var1 );
		float fc = cos( _var1 );
		float4 row_0 = float4( fc * float2( 0.500000, 0.100000 ).x, -fs * float2( 0.500000, 0.100000 ).x, 0, ( -center_def.x * fc + center_def.y * fs ) * float2( 0.500000, 0.100000 ).x + center_def.x + _var13.x );
		float4 row_1 = float4( fs * float2( 0.500000, 0.100000 ).y, fc * float2( 0.500000, 0.100000 ).y, 0, ( -center_def.x * fs - center_def.y * fc ) * float2( 0.500000, 0.100000 ).y + center_def.y + _var13.y );
		_var13.x = dot( float4( In.vTexCoord_0, 0, 1 ), row_0 );
		_var13.y = dot( float4( In.vTexCoord_0, 0, 1 ), row_1 );
	}
	float2 _var28 = float2( _var19, _var20 );
	float _var29 = float( 0.500000 ) * _var19;
	_var6 = _var6 * _var22;
	float2 _var30 = _var23.xx;
	_var24 = _var24 * float( 2.500000 );
	_var11 = _var11 * _var21;
	_var25 = abs( _var25 );
	_var26 = _var26 * float( -0.001250 );
	float _var31 = smoothstep( float( 0.200000 ), float( 0.850000 ), _var27 );
	float _var32 = smoothstep( float( 0.600000 ), float( 0.000000 ), _var27 );
	float _var33 = tex2D( _Sampler_02, _var13 ).b;
	_var28 = float( 0.600000 ) * _var28;
	_var29 = float( 0.500000 ) + _var29;
	_var30 = _var30 * float( 2.000000 );
	_var25 = _var25 * float( 2.000000 );
	float2 _var34 = _var15 * _var26;
	float4 _var35 = lerp( float4( 1.000000, 1.000000, 1.000000, 1.000000 ), float4( 0.795000, 0.083475, 0.083475, 1.000000 ), _var31 );
	float4 _var36 = lerp( float4( 1.000000, 1.000000, 1.000000, 1.000000 ), float4( 1.000000, 0.975000, 0.950000, 1.000000 ), _var32 );
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float rot_def = float( 0.0f );
		float2 trans_def = float2( 0.0f, 0.0f );
		float fs = sin( rot_def );
		float fc = cos( rot_def );
		float4 row_0 = float4( fc * float2( 1.500000, 0.250000 ).x, -fs * float2( 1.500000, 0.250000 ).x, 0, ( -center_def.x * fc + center_def.y * fs ) * float2( 1.500000, 0.250000 ).x + center_def.x + trans_def.x );
		float4 row_1 = float4( fs * float2( 1.500000, 0.250000 ).y, fc * float2( 1.500000, 0.250000 ).y, 0, ( -center_def.x * fs - center_def.y * fc ) * float2( 1.500000, 0.250000 ).y + center_def.y + trans_def.y );
		_var28.x = dot( float4( _var28, 0, 1 ), row_0 );
		_var28.y = dot( float4( _var28, 0, 1 ), row_1 );
	}
	float4 _var37 = float4( _var24, _var30 );
	_var35 = _var35 * _var36;
	float2 _var38 = _var28 + _var16;
	float2 _var39 = _var28 - _var16;
	float2 _var40 = _var37.wy;
	float2 _var41 = _var37.xz;
	float3 _var42 = tex2D( _Sampler_01, _var38 ).rgb;
	float3 _var43 = tex2D( _Sampler_01, _var39 ).rgb;
	_var42 = lerp( _var42, _var43, _var29 );
	float2 _var44 = _var42.xy;
	_var44 = _var44 - float( 0.500000 );
	_var44 = _var18 * _var44;
	float2 _var45 = float( -0.100000 ) * _var44;
	float2 _var46 = float( 0.100000 ) * _var44;
	_var45 = _var45 + In.vTexCoord_0;
	for ( int _var47 = 0; _var47 < 20; _var47++ )
	{
		float2 _var48 = _var34;
		float2 _var49 = _var46;
		_var48 = _var48 * _var47;
		_var49 = _var49 + In.vTexCoord_0;
		_var48 = _var48 + _var49;
		float4 _var50 = tex2D( _Sampler_00, _var48 ).rgba;
		_var50 = _var50 * g_cArray_161[_var47];
		_var12 = _var12 + _var50;
	}
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float fs = sin( _var6 );
		float fc = cos( _var6 );
		float4 row_0 = float4( fc * _var30.x, -fs * _var30.x, 0, ( -center_def.x * fc + center_def.y * fs ) * _var30.x + center_def.x + _var40.x );
		float4 row_1 = float4( fs * _var30.y, fc * _var30.y, 0, ( -center_def.x * fs - center_def.y * fc ) * _var30.y + center_def.y + _var40.y );
		_var40.x = dot( float4( _var45, 0, 1 ), row_0 );
		_var40.y = dot( float4( _var45, 0, 1 ), row_1 );
	}
	{
		float2 center_def = float2( 0.5f, 0.5f );
		float fs = sin( _var11 );
		float fc = cos( _var11 );
		float4 row_0 = float4( fc * _var24.x, -fs * _var24.x, 0, ( -center_def.x * fc + center_def.y * fs ) * _var24.x + center_def.x + _var41.x );
		float4 row_1 = float4( fs * _var24.y, fc * _var24.y, 0, ( -center_def.x * fs - center_def.y * fc ) * _var24.y + center_def.y + _var41.y );
		_var41.x = dot( float4( _var45, 0, 1 ), row_0 );
		_var41.y = dot( float4( _var45, 0, 1 ), row_1 );
	}
	float4 _var51 = tex2D( _Sampler_03, _var40 ).rgba;
	float4 _var52 = tex2D( _Sampler_03, _var41 ).rgba;
	_var51 = _var4 * _var51;
	_var52 = _var10 * _var52;
	_var51 = lerp( _var51, _var52, _var25 );
	_var51 = _var51 * float( 0.000000 );
	_var51 = _var17 * _var51;
	_var51 = smoothstep( float( 0.150000 ), float( 0.800000 ), _var51 );
	_var51 = _var33 * _var51;
	float4 _var53 = smoothstep( float( 0.400000 ), float( 0.500000 ), _var51 );
	float4 _var54 = float( 0.300000 ) * _var51;
	float2 _var55 = _var53.yz;
	float _var56 = _var53.x;
	_var54 = _var54 + _var12;
	_var55 = float( 0.300000 ) * _var55;
	_var56 = float( 0.600000 ) * _var56;
	float _var57 = _var54.z;
	float3 _var58 = _var54.xyz;
	float3 _var59 = float3( _var55, _var56 );
	_var58 = _var58 + _var57;
	float3 _var60 = float3( 0.000000, _var57.x, 0.000000 );
	float3 _var61 = float3( 0.000000, 0.000000, _var57.x );
	float4 _var62 = float4( _var59.x, _var59.y, _var59.z, 1.000000 );
	_var58 = _var57 * _var58;
	_var60 = lerp( _var60, _var61, float( 0.700000 ) );
	_var60 = _var60 * float( 0.250000 );
	_var58 = _var58 + _var60;
	float4 _var63 = float4( _var58.x, _var58.y, _var58.z, 1.000000 );
	_var62 = _var62 + _var63;
	_var62 = _var62 * _var35;
	_var0 = lerp( _var0, _var62, g_cData_Mutable_01 );
	Out.vColor_0 = _var0;
	return Out;
}